
# COMANDOS GIT

Repositório para armazenar comandos utilizados no GIT.

## ⌨ CONFIGURAR UM NOVO PROJETO

| COMANDO | RESUMO |
|---------|--------|
mkdir <NOME DO REPOSITORIO>  | CRIA UM LOCAL |
C: <NOME DO REPOSITORIO> | ENTRA DENTRO DO REPOSITÓRIO |
git init | INICIALIZA UM NOVO REPOSITÓRIO GIT NO DIRETÓRIO ATUAL |
git config --global user.name | CADASTRA UM USUÁRIO |
git config --global user.email | CADASTRA  UM E-MAIL |
git remote add origin <URL> | CONECTA O REPOSITÓRIO LOCAL COM UM SERVIDOR REMOTO |
git commit -am "Primeio commit" | ENVIA A BRANCH PRINCIPAL PARA O REMOTO E CONFIGURA O RASTREAMENTO UPSTREAM |
git config --global --list | RETORNA AS CONFIGURAÇÕES GLOBAIS |
git clone <NOME DO ENDEREÇO DO GIT> | CRIAR CLONE DO REPOSITÓRIO DO GIT |

## ⌨ DESFAZER MUDANÇAS:
| COMANDO | RESUMO |
|---------|--------|
git reset --soft HEAD^ | DESFAZ O ÚLTIMO COMMIT MA SMANTÉM AS MUDANÇAS PREPARADAS PARA RE-COMMIT | 
git checkout --<ARQUIVO> | DESCARTA MUDANÇAS LOCAIS EM UM ARQUIVO, REVERTENDO PARA O ÚLTIMO COMMIT | 


## ⌨ TRABALHANDO COM BRANCHS:
| COMANDO | RESUMO |
|---------|--------|
git branch -a | LISTA TODAS AS BRANCHS. INCLUINDO AS REMOTAS |
git checkout -b feature/nova-feature | CRIA E MUDA PARA UMA NOVA BRANCH PARA A SUA FEATURE |
git push -u origin feature/nova-feature | ENVIA A NOVA BRANCH PARA O REMOTO E CONFIGURA O RASTREAMENTO UPSTREAM |
git branch -d feature/velha-feature | DELETA UMA BRANCH LOCAL APÓS A FUSÃO |

## ⌨ LIDANDO COM MUDANÇAS:
| COMANDO | RESUMO |
|---------|--------|
git add -p | ADICIONA MUDANÇAS INTERATIVAMENTE, PERMITINDO A SELEÇÃO DE PARTES ESPECÍFICAS |
git commit --amend  | MODIFICA O ÚLTIMO COMMIT, PERMITINDO ATUALIZAR A MENSAGEM OU ADICIONAR NOVAS ALTERAÇÕES |
git reset -hard HEAD~2  | DESFAZ OS ÚLTIMOS DOIS COMMITS, DESCARTANDO MUDANÇAS LOCALMENTE |
git satsh push -m "TRABALHO EM PROGRESSO"  | SALVA MUDANÇAS ATUAIS COM UMA DESCRIÇÃO PERSONALIZADA |

## ⌨ COLABORAÇÃO::
| COMANDO | RESUMO |
|---------|--------|
git fetch origin | BUSCA MUDANÇAS DO REMOTO SEM MESCLAR |
git merge origin/main | MESCLA MUDANÇAS DA BRANCH PRINCIPAL REMOTA PARA A BRANCH ATUAL  |
git rebase -i HEAD~3 | REBASES INERATIVAMENTE OS TRÊS ULTIMOS COMMITS PARA UM HISTÓRICO LIMPO  |
git cherry-pick <commit-hash> | APLICA UM COMMIT ESPECÍFICO DE OUTRA BRANCH  |

## ⌨ HISTÓRICO E RASTREAMENTO:
| COMANDO | RESUMO |
|---------|--------|
git log | MOSTRA TODOS OS HISTÓRICOS DE COMMITS |
git log --oneline -- graph --decorate --all | MOSTRA O HISTÓRICO DE COMMITS EM UM GRÁFICO VISUAL COMPACTO |
git diff HEAD^ HEAD | MOSTRA AS MUDANÇAS INTRODUZIDAS PELO ÚLTIMO COMMIT |
git blame <arquivo> -L 10,20 | MOSTRA QUEM ALTEROU AS LINHAS DE 10 A 20 EM UM ARQUIVO |

## ⌨ GERENCIAMENTO TAGS:
| COMANDO | RESUMO |
|---------|--------|
git tag -a v1.0 - m "Versão 1.0 liberado" | CRIA UMA TAG ANOTADA PARA UMA VERSÃO COM UMA MENSAGEM |
git push origin v1.0 | ENVIA A TAG PARA O REPOSITÍO REMOTO |

## ⌨ LIDANCO COM REMOTOS:
| COMANDO | RESUMO |
|---------|--------|
git remote -v | LISTA OS REPOSITÓRIOS REMOTOS CONFIGURADOS COM SEUS URLS  | 
git fetch --all --prune | BUSCA MUDANÇAS DE TODOS OS REMOTOS E REMOVE A BRANCHS REMOTOS OBSOLETOS | 

## ⌨ SABER ONDE O GIT ARMAZENA AS CONFIGURAÇÕES:
| COMANDO | RESUMO |
|---------|--------|
git config --global --show-origin credential.helper | SABER ONDE O GIT ARMAZENA AS CONFIGURAÇÕES | |